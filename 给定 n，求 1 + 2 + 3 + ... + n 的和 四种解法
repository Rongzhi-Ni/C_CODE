循环输入，每输入一个正整数n(n<=65535),输出1+2+3+...+n的值，并且多输出一个空行。当没有任何输入时，结束程序。




源码剖析：
错误解法：
#include <stdio.h>
int main() {
    int n;
    while (scanf("%d", &n) != EOF) {
        int ans = n * (n + 1) / 2;   // (1)
        printf("%d\n\n", ans);
    }
    return 0;
}

1) 这行代码直接套用等差数列求和公式。但是这里有一个小问题。
因为当n 取最大值 65535
65535 时
n∗(n+1)=65535∗65536=2^32-2^16，而int能够表示的最大值为2^32-1，所以产生了溢出。就变成了负数。至于为什么溢出会变成负数，可以了解补码相关的知识：计算机补码详解。


正确解法1：循环枚举
#include <stdio.h>
int main() {
    int n, ans;
    while (scanf("%d", &n) != EOF) {
        ans = 0;          // (1)
        while(n) {        // (2)
            ans += n;     // (3)
            --n;          // (4)
        }
        printf("%d\n\n", ans);
    }
    return 0;
}

(1) 初始化结果ans为0；
(2) 用一个while语句来执行循环，一直自减 n，直到n减为零为止；
(3) 将当前n的值累加给 ans（循环完毕，ans就是1到n的数的累加和）；
(4) --n等价于n = n - 1；
这种方法，就是普通的枚举，正确性容易保证，但是时间复杂度略高，为 O(n)。



正确解法2：奇偶性判断
#include <stdio.h>
int main() {
    int n, ans;
    while (scanf("%d", &n) != EOF) {
        if(n % 2 == 0) {           // (1)
            ans = n / 2 * (n+1);   // (2)
        } else {                   // (3)
            ans = (n+1) / 2 * n;   // (4)
        }
        printf("%d\n\n", ans);
    }
    return 0;
}


由于n 和 n+1
n+1 的奇偶性必然不同，所以两者相乘必然能被 2 整除。
所以我们可以得到如下情况：
sum(n)=(n+1)/2*n   n为奇数
sum(n)=n/2*(n+1)   n为偶数
也就是根据奇偶性来决定是用 n 去除 2，还是n+1 去除 2，从而避免溢出。
(1) %在C语言中是取模的意思，a%b代表a除上b得到的余数，a%2 == 0则代表 a 为偶数，否则为奇数；这里的if判断代表n是偶数；
(2) n为偶数时，n能被 2 整除，所以先计算 n/2，再乘上n+1；
(3) 这里用到了 else语句，代表接下来要进行n为奇数的处理；
(4) n为奇数时，n+1能被 2 整除，所以先计算 (n+1)/2，再乘上n；

正确解法3：无符号整型

#include <stdio.h>
int main() {
    unsigned int n;
    while (scanf("%u", &n) != EOF) {
        unsigned int ans = n * (n + 1) / 2; // (1)
        printf("%u\n\n", ans);
    }
    return 0;
}


(1) 由于无符号整型的范围为 [0,2^32-1],所以不需要担心溢出问题。



正确解法4：64位整型
#include <stdio.h>
int main() {
    long long n;
    while (scanf("%lld", &n) != EOF) {
        long long ans = n * (n + 1) / 2;  // (1)
        printf("%lld\n\n", ans);
    }
    return 0;
}
(1) long long是C语言中的64位整型，范围比int大了一个平方量级，在[-2^63,2^63-1],所以也是能够涵盖 n 最大的情况的。







